
'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.

'Starting tests...' println.
l = 0.
' 1 eq 1 ... ' print.
s = 1.
t = s equal: 1.
t ifTrue: [ 'True' println. 'Hi' println. ] ifFalse: ['False' println.].
' 1 eq 2 ... ' print.
s = 1.
t = s equal: 2.
t ifTrue: ['True' println.] ifFalse: ['False' println.].


a = Object clone.
Current object: a.
a makeprop: 'test'.
a test: 'test worked'.
b = a test.
b println.

myPrint: val |  | .
val println.
b  = 42.
^b.

notRun |val| . 
'This should not have run' println.
^False.

factorial: n |  | .
l = l add: 1.
'Doing factorial: ' print.
n println.
z = 1.
t = n equal: 1.
t ifFalse: [
x = n subtract: 1.
'Recursing' println.
y = a factorial: x.
z = y multiply: n.
].
^z.



'Starting...' println.
c = a factorial: 1.
'c is ' print.
c println.

'L is ' print . l println.

'Finished' println.
